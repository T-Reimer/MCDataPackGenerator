const colour = require("blockly/colour");
const minecraft = require("minecraft");
const blockStates = minecraft.blockState;


const blocks = (function(){
    let tmp = [];
    blockStates.list.forEach(function(block){
        block.item.forEach(function(name){
            if(!tmp.includes(name)){
                tmp.push(name);
            }
        });
    });

    let list = [];
    tmp.forEach(function(id){
        let name = minecraft.getItemName(id);
        if(!name){
            name = id;
        }
        list.push([name, id]);
    });
    return list.sort(function(a, b){
        if(a[0] === b[0]){
            return 0;
        }
        if(a[0] > b[0]){
            return 1;
        } else{
            return -1;
        }
    });
})();

let options = {
    "message0": "Block %1",
    "args0": [
        {
            "type": "field_dropdown",
            "name": "BLOCK",
            "options": blocks
        }
    ],
    "output": "String",
    "colour": colour.blocks,
    "tooltip": "Add a block state to a block.",
    "helpUrl": "",
    "mutator": "block_state_mutator"
};

Blockly.Blocks['item_data'] = {
    init: function () {
        this.jsonInit(options);
    }
};

Blockly.Functions["item_data"] = function (block) {
    let val = block.getFieldValue("BLOCK") || "";
    // return val;
    return [val, Blockly.Functions.ORDER_MEMBER];
};


Blockly.defineBlocksWithJsonArray([  // BEGIN JSON EXTRACT
    // Block for text value
    {
      "type": "block_state_create_join_container",
      "message0": "add blockstates %1 %2",
      "args0": [{
        "type": "input_dummy"
      },
      {
        "type": "input_statement",
        "name": "STACK"
      }],
      "colour": colour.blocks,
      "tooltip": "add, remove or reorder items to reconfigure this blockstate block",
      "enableContextMenu": false
    },
    {
      "type": "block_state_create_join_item",
      "message0": "blockstate",
      "previousStatement": null,
      "nextStatement": null,
      "colour": colour.blocks,
      "tooltip": "add a blockstate input",
      "enableContextMenu": false
    }
  ]);

// copied from blockly text.js
const mutator = {
    /**
     * Create XML to represent number of text inputs.
     * @return {!Element} XML storage element.
     * @this Blockly.Block
     */
    mutationToDom: function () {
        var container = document.createElement('mutation');
        container.setAttribute('items', this.itemCount_);
        return container;
    },
    /**
     * Parse XML to restore the text inputs.
     * @param {!Element} xmlElement XML storage element.
     * @this Blockly.Block
     */
    domToMutation: function (xmlElement) {
        this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);
        this.updateShape_();
    },
    /**
     * Populate the mutator's dialog with this block's components.
     * @param {!Blockly.Workspace} workspace Mutator's workspace.
     * @return {!Blockly.Block} Root block in mutator.
     * @this Blockly.Block
     */
    decompose: function (workspace) {
        var containerBlock = workspace.newBlock('block_state_create_join_container');
        containerBlock.initSvg();
        var connection = containerBlock.getInput('STACK').connection;
        for (var i = 0; i < this.itemCount_; i++) {
            var itemBlock = workspace.newBlock('block_state_create_join_item');
            itemBlock.initSvg();
            connection.connect(itemBlock.previousConnection);
            connection = itemBlock.nextConnection;
        }
        return containerBlock;
    },
    /**
     * Reconfigure this block based on the mutator dialog's components.
     * @param {!Blockly.Block} containerBlock Root block in mutator.
     * @this Blockly.Block
     */
    compose: function (containerBlock) {
        var itemBlock = containerBlock.getInputTargetBlock('STACK');
        // Count number of inputs.
        var connections = [];
        while (itemBlock) {
            connections.push(itemBlock.valueConnection_);
            itemBlock = itemBlock.nextConnection &&
                itemBlock.nextConnection.targetBlock();
        }
        // Disconnect any children that don't belong.
        for (var i = 0; i < this.itemCount_; i++) {
            var connection = this.getInput('ADD' + i).connection.targetConnection;
            if (connection && connections.indexOf(connection) == -1) {
                connection.disconnect();
            }
        }
        this.itemCount_ = connections.length;
        this.updateShape_();
        // Reconnect any child blocks.
        for (var i = 0; i < this.itemCount_; i++) {
            Blockly.Mutator.reconnect(connections[i], this, 'ADD' + i);
        }
    },
    /**
     * Store pointers to any connected child blocks.
     * @param {!Blockly.Block} containerBlock Root block in mutator.
     * @this Blockly.Block
     */
    saveConnections: function (containerBlock) {
        var itemBlock = containerBlock.getInputTargetBlock('STACK');
        var i = 0;
        while (itemBlock) {
            var input = this.getInput('ADD' + i);
            itemBlock.valueConnection_ = input && input.connection.targetConnection;
            i++;
            itemBlock = itemBlock.nextConnection &&
                itemBlock.nextConnection.targetBlock();
        }
    },
    /**
     * Modify this block to have the correct number of inputs.
     * @private
     * @this Blockly.Block
     */
    updateShape_: function () {
        if (this.itemCount_ && this.getInput('EMPTY')) {
            this.removeInput('EMPTY');
        } else if (!this.itemCount_ && !this.getInput('EMPTY')) {
            this.appendDummyInput('EMPTY')
                .appendField(this.newQuote_(true))
                .appendField(this.newQuote_(false));
        }
        // Add new inputs.
        for (var i = 0; i < this.itemCount_; i++) {
            if (!this.getInput('ADD' + i)) {
                var input = this.appendValueInput('ADD' + i);
                if (i == 0) {
                    input.appendField(Blockly.Msg['TEXT_JOIN_TITLE_CREATEWITH']);
                }
            }
        }
        // Remove deleted inputs.
        while (this.getInput('ADD' + i)) {
            this.removeInput('ADD' + i);
            i++;
        }
    }
};

const extension = function () {
    // Add the quote mixin for the itemCount_ = 0 case.
    this.mixin(Blockly.Constants.Text.QUOTE_IMAGE_MIXIN);
    // Initialize the mutator values.
    this.itemCount_ = 2;
    this.updateShape_();
    // Configure the mutator UI.
    this.setMutator(new Blockly.Mutator(['block_state_create_join_item']));
};


Blockly.Extensions.registerMutator('block_state_mutator', mutator, extension);