let idNum = 0;
const html = require("html");
const JSEvents = require("jsevents");

class FileTree{
    
    /**
     * 
     * @param {Element} ul html element to put the file tree under
     * @param {Object} structure the file structure to use
     */
    constructor(ul, structure, options){
        this.setup();

        this.structure = structure;

        if(options){
            this.options = options;
            
            if(options.name){
                this.name = options.name;
            } else{
                this.name = html.newId();
            }
        }

        this.setupParent(ul);
        this.createHtml();
    }

    /**
     * run the class setup vars
     */
    setup(){
        this.events = new JSEvents(this);
        const that = this;
        this.name = "";
        this.selected = null;

        this.html = document.createElement("ul");
        if(!this.options){
            this.options = {};
        }

        this.radioName = html.newId(10) + "-radioName";

        // store the data and elements here
        this.files = [];
        this.dirs = [];

        // add some event listeners
        this.on("new", function(){
            that.triggerEvent("changed", [this.data]);
        });
    }

    /**
     * Get the data for this file structure
     */
    get data(){
        return this.structure;
    }

    /**
     * Create a new object for file or dir
     * 
     * @param {String} type the type of file
     */
    createNew(t){
        let type = "file";
        let con = "";
        if(t === "dir"){
            type = "dir";
            con = [];
        }

        let data = {
            type: type,
            name: "",
            contents: con
        }

        return data;
    }

    /**
     * delete a file or directory
     * 
     * this will return the file/dir that was removed
     * 
     * @param {Object} data the object to match to
     */
    delete(data){

        if(this.selected === data){
            this.selected = null;
        }

        let removed = null;

        // get and remove the dom element
        let d = this.getElement(data);
        if(d && d.el && d.el.parentNode){
            d.el.parentNode.removeChild(d.el);
        }

        checkDirs(this.structure);

        return removed;

        function checkDirs(obj){

            for(let i = 0; i < obj.length; i++){
                if(removed){
                    return;
                }

                if(obj[i] === data){
                    removed = obj.splice(i, 1);
                    return;
                }

                if(obj[i].type === "dir"){
                    checkDirs(obj[i].contents);

                    if(removed){
                        return;
                    }
                }
            }

        }
    }

    /**
     * set the current selection
     * 
     * @param {Object} data 
     */
    setSelection(data){
        let prev = this.selected;
        this.selected = data;

        this.triggerEvent("selected", [data, prev]);

        if(data){
            if(data.type === "dir"){
                this.triggerEvent("dir-opened", [data, prev]);
            } else{
                this.triggerEvent("file-opened", [data, prev]);
            }
        }
    }

    /**
     * gets the directory selected. 
     * 
     * if its a file that is selected then it returns the files parent
     * if the file is in the root then it returns the entire tree
     */
    getSelectionDir(){
        let sel = this.selected;
        if(!sel){
            return this.structure;
        }
        if(sel.type === "dir"){
            return sel;
        }

        // check if it matches one of the root files
        for(let i = 0; i < this.structure.length; i++){
            if(sel === this.structure[i]){
                return this.structure;
            }
            if(this.structure[i].type === "dir"){
                let m = match(this.structure[i]);
                if(m){
                    return m;
                }
            }
        }

        return sel;

        function match(m){
            for(let i = 0; i < m.contents.length; i++){
                if(m.contents[i] === sel){
                    return m;
                }
                if(m.contents[i].type === "dir"){
                    let mat = match(m.contents[i]);
                    if(mat){
                        return mat;
                    }
                }
            }
            return null;
        }
    }

    /**
     * check if the dir given is the root directory
     * 
     * @param {*} data 
     */
    isRoot(data){
        return this.structure === data;
    }

    /**
     * get the element for the given data
     * 
     * @param {Object} data get the element for the given data
     */
    getElement(data){
        if(!data){
            return null;
        }
        for(let i = 0; i < this.files.length; i++){
            if(this.files[i].data === data){
                return this.files[i];
            }
        }
        for(let i = 0; i < this.dirs.length; i++){
            if(this.dirs[i].data === data){
                return this.dirs[i];
            }
        }
        return null;
    }

    /**
     * trigger a event callback
     * 
     * @param {String} event the event name
     * @param {Object} args the args to pass into function
     */
    triggerEvent(event, args){
        this.events.triggerCallback(event, this, args);
    }

    /**
     * edit a file or dir name
     * 
     * @param {Object} data the file or dir object
     * @returns {Promise}
     */
    async editName(data){
        const that = this;
        return new Promise(function(resolve, reject){
            if(!data){
                throw new Error("Incorrect data to edit the file name");
            }

            let d = that.getElement(data);
            let li = d.el;

            // get the name element
            let span = li.getElementsByClassName("file-name")[0];
            span.style.display = "none";
            let runAlready = false;

            let input = document.createChild("input", {
                type: "text",
                on: {
                    focusout: setName,
                    change: setName,
                    keyup: function(event){
                        if(event.keyCode === 13){
                            setName.apply(this, arguments);
                        }

                    }
                }
            });
            span.parentNode.insertBefore(input, span);

            function reset(){
                // remove the input element
                input.parentNode.removeChild(input);

                span.style.display = "";

                that.updateDom();
            }

            function setName(event){
                if(runAlready){
                    return;
                }
                runAlready = true;
                let name = this.value.trim().toLowerCase();
                // replace all ilegal characters with a `-`
                name = name.replace(/[^a-zA-Z0-9-_.]/g, "-");

                if(name === ""){
                    that.delete(data);
                    reset();
                    throw new Error("File name can't be empty");
                }

                // TODO: check if the name already exists in the directory

                data.name = name;

                reset();

                resolve(data);
            }
        });
    }

    /**
     * setup the main element
     * 
     * @param {Element} ul the parent element
     */
    setupParent(ul){
        const that = this;
        let parentId = this.name + "-menu-" + html.newId();
        // <li class="active border-top border-bottom">
        let li = ul.createChild("li", {
            classList: ["active", "border-top", "border-bottom"],
            on: {
                click: function(){
                    that.triggerEvent("selected", []);
                }
            }
        });

        // <a href="#advancements-menu" data-toggle="collapse" aria-expanded="false" class="btn">
        li.createChild("a", {
            href: "#" + parentId,
            "data-toggle": "collapse",
            "aria-expanded": "false",
            classList: ["btn"],
            text: this.name
        });

        //<a class="material-icons">note_add</a>
        li.createChild("a", {
            classList: ["material-icons", "add-new-icon"],
            text: "note_add",
            on: {
                click: function(){
                    // show a new file element
                    let data = that.createNew("file");

                    // get the parent of the current selection
                    let parentDir = that.getSelectionDir();

                    if(that.isRoot(parentDir)){
                        parentDir.push(data);
                    } else{
                        parentDir.contents.push(data);
                    }

                    that.updateDom();

                    that.editName(data)
                        .then(function(newData){

                            that.triggerEvent("new", [data]);
                            that.triggerEvent("new-file", [data]);
                        })
                        .catch(function(err){
                            that.triggerEvent("error", [err]);
                            console.error(err);
                        });
                }
            }
        });

        // <a class="material-icons">create_new_folder</a>
        li.createChild("a", {
            classList: ["material-icons", "add-new-icon"],
            text: "create_new_folder",
            on: {
                click: function(){
                    // show a new folder element
                    let data = that.createNew("dir");

                    // get the parent of the current selection
                    let parentDir = that.getSelectionDir();

                    if(that.isRoot(parentDir)){
                        parentDir.push(data);
                    } else{
                        parentDir.contents.push(data);
                    }

                    that.updateDom();

                    that.editName(data)
                        .then(function(newData){

                            that.triggerEvent("new", [data]);
                            that.triggerEvent("new-dir", [data]);
                        })
                        .catch(function(err){
                            that.triggerEvent("error", [err]);
                            console.error(err);
                        });
                }
            }
        });

        //<ul class="folder collapse list-unstyled" id="advancements-menu">
        let parent = li.createChild("ul", {
            classList: ["folder", "collapse", "list-unstyled"],
            id: parentId
        });

        this.parent = parent;
    }

    /**
     * update the DOM element to the current state
     */
    updateDom(){
        const that = this;
        update(this.structure, this.html);

        function update(contents, html){
            let nextParent;

            for(let i = 0; i < contents.length; i++){
                let d = contents[i];

                let data = that.getElement(d);
                let el;
                if(data){
                    el = data.el;
                }
    
                if(!el){

                    if(d.type === "dir"){
                        html.appendChild(that.createDirectory(d));
                    } else{
                        html.appendChild(that.createFile(d));
                    }
                }

                if(el){
                    // get the name element and update the text
                    let span = el.getElementsByClassName("file-name")[0];

                    if(span){
                        span.innerText = d.name;
                    }

                    if(d.type === "dir"){
                        nextParent = el.getElementsByTagName("ul")[0];
                        if(nextParent){
                            update(d.contents, nextParent);
                        } else{
                            console.warn("Element not found", el);
                        }
                    }
                }
            }
        }

    }
    /**
     * create and update the html for this file tree
     * 
     * this function can be called at any time to recreate the file tree elements.
     * This will re-collapse all of the directories
     */
    createHtml(){
        this.html = document.createChild("ul", {
            classList: ["folder", "list-unstyled", "components"]
        });
        let html = this.html;

        this.parent.innerHTML = "";
        this.parent.appendChild(this.html);

        this.updateDom();
    }

    /**
     * create the directory list
     * 
     * @param {Object} data the directory object
     */
    createDirectory(data){
        const that = this;
        let li = document.createChild("li", {
            classList: ["btn-group-toggle"]
        });

        let id = html.newId();
        let radioId = id + "-radio";

        li.createChild("input", {
            type: "radio",
            name: this.radioName,
            autocomplete: "off",
            id: radioId
        });

        // <label href="#advancements-menu-folder" data-toggle="collapse" aria-expanded="false"
        //   class="file" for="adv-f1">
        let label = li.createChild("label", {
            href: "#" + id,
            "data-toggle": "collapse",
            "aria-expanded": "false",
            classList: ["file"],
            for: radioId,
            on: {
                click: function(){
                    that.setSelection(data);
                }
            }
        });

        // <i class="material-icons md-18">folder</i>
        label.createChild("i", {
            classList: ["material-icons", "md-18"],
            text: "folder"
        });
        label.createChild("span", {
            classList: ["file-name"],
            text: data.name
        });
        // label.appendChild(document.createTextNode(data.name));

        let child = li.createChild("ul", {
            classList: ["folder", "collapse", "list-unstyled"],
            id: id
        });

        for(let i = 0; i < data.contents.length; i++){
            let d = data.contents[i];

            if(d.type === "dir"){
                child.appendChild(this.createDirectory(d));
            } else{
                child.appendChild(this.createFile(d));
            }
        }
        this.addDir(li, data);
        return li;
    }

    /**
     * Create a file in the list
     * 
     * @param {Object} data to create the file
     */
    createFile(data){
        const that = this;
        let radioId = html.newId() + "-radio";

        let li = document.createChild("li");

        //<input id="adv-f1" type="radio" name="advancements-selected" autocomplete="off">

        li.createChild("input", {
            type: "radio",
            name: this.radioName,
            autocomplete: "off",
            id: radioId
        });

        // <label class="file" for="adv-f2">
        let label = li.createChild("label", {
            classList: ["file"],
            for: radioId,
            on: {
                click: function(){
                    that.setSelection(data);
                }
            }
        });

        // <i class="material-icons md-18">note</i>
        label.createChild("i", {
            classList: ["material-icons", "md-18"],
            text: "note"
        });
        label.createChild("span", {
            classList: ["file-name"],
            text: data.name
        });
        // label.appendChild(document.createTextNode(data.name));

        this.addFile(li, data);
        return li;
    }

    /**
     * add a file to the data list
     * 
     * @param {Element} el 
     * @param {Object} data 
     */
    addFile(el, data){
        for(let i = 0; i < this.files.length; i++){
            if(this.files[i].data === data){
                this.files[i].el = el;
                return;
            }
        }
        this.files.push({
            el: el,
            data: data
        });
    }

    /**
     * add a folder to the data list
     * 
     * @param {Element} el 
     * @param {Object} data 
     */
    addDir(el, data){
        for(let i = 0; i < this.dirs.length; i++){
            if(this.dirs[i].data === data){
                this.dirs[i].el = el;
                return;
            }
        }
        this.dirs.push({
            el: el,
            data: data
        });
    }
}

module.exports = FileTree;