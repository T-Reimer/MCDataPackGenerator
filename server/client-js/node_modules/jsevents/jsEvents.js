

class JSEvents{

    constructor(caller){
        this.events = {};
        const that = this;
        if (caller) {
            caller.on = function (event, callback) {
                console.log("Register", event);
                that.on(event, callback);
            };
            caller.remove = function (event, callback) {
                that.remove(event, callback);
            };
        }
    }

    /**
     * create a event listener
     * 
     * @param {String} event the event name
     * @param {*} callback 
     */
    on(event, callback){
        if(event && typeof callback === "function"){
            if(!this.events[event]){
                this.events[event] = [];
            }

            this.events[event].push(callback);
        }
    }

    /**
     * Remove a event listener
     * 
     * @param {String} event the event name 
     * @param {*} callback 
     */
    remove(event, callback){
        if(this.events[event]){
            for(let i = this.events[event].length - 1; i >= 0; i--){
                if(callback === this.events[event][i]){
                    this.events[event].splice(i, 1);
                }
            }
        }
    }

    /**
     * trigger a callback event
     * 
     * @param {String} event the event name
     * @param {*} that 
     * @param {*} args 
     */
    triggerCallback(event, that, args){
        console.log("Trigger Event", event);
        if(this.events[event]){
            for(let i = 0; i < this.events[event].length; i++){
                try{
                    this.events[event][i].apply(that, args);
                } catch(err){}
            }
        }
    }
}

module.exports = JSEvents;