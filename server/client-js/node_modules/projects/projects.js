const ProjectFile = require("./file.js");
const newFileStructure = require("./newfile.js");

/**
 * get the list of local projects
 * 
 * @returns {Promise}
 */
async function getList() {
    let names = [];

    let pro = localStorage.getItem("projects");
    if (pro) {
        let list = JSON.parse(pro);

        for (let i = 0; i < list.length; i++) {
            let project = list[i];
            names.push(project.name);
        }
    }

    return names;
}
module.exports.list = getList;

/**
 * update the projects list on the upper left
 */
function updateVisualList() {
    let div = $("#project-list-dropdown");
    div.empty();

    getList().then(function (li) {
        li.sort();
        for (let i = 0; i < li.length; i++) {
            let name = li[i];

            let a = document.createElement("a");
            a.setAttribute("href", "#project_" + name);
            a.classList.add("dropdown-item");
            a.appendChild(document.createTextNode(name));
            div.append(a);
        }
    });
}
module.exports.updateVisualList = updateVisualList;

/**
 * load a file by name
 * 
 * @param {String} name the project name
 */
async function loadProject(name) {
    let pro = localStorage.getItem("projects");
    if (pro) {
        let list = JSON.parse(pro);

        for (let i = 0; i < list.length; i++) {
            let project = list[i];
            if (project.name === name) {
                return project;
            }
        }
    }

    throw new Error("Project Not Found");
}

module.exports.load = loadProject;

module.exports.loadDemo = function () {
    fetch("demo.json").then(function (response) {
        return response.json();

    }).then(function (data) {
        saveFunction(data)
            .then(function () {
                let name = data.name;
                openProject(name);
            })
            .catch(function (err) {
                console.error(err);
                console.error(new Error("Failed to save the demo"));
            });

    }).catch(function (err) {
        console.error(err);
    });
}

/**
 * Create a new project and save it
 * 
 * @param {Object} data the form data
 * 
 * @returns {Promise}
 */
module.exports.new = async function (data) {
    let name = null;
    let file = newFileStructure();

    // add all the form data to the file
    for (let i = 0; i < data.length; i++) {
        file[data[i].name] = data[i].value;
    }

    // set the name var
    if (file.name) {
        name = file.name;
    }
    if (name === null || name === "") {
        throw new Error("Data Pack name can't be blank.");
    }
    if (file.namespace === null || file.namespace === "") {
        throw new Error("Namespace can't be blank");
    }
    
    // save the file and open it
    await saveFunction(file);

    // open the file
    let newFile = null;
    await openProject(name).then(function(f){
        newFile = f;
    });

    return newFile;
};

/**
 * load a project and open it
 * 
 * @param {String} name the project name
 * @returns {Promise}
 */
function openProject(name) {
    return new Promise(function (resolve, reject) {
        // check if the project exists
        loadProject(name)
            .then(function () {
                let file = new ProjectFile(name);
                global.openFile = file;

                resolve(file);
            })
            .catch(function (err) {
                reject(err);
            });
    });
}
module.exports.open = openProject;

/**
 * save the file to localStorage
 * 
 * @param {Object} file the file object
 */
async function saveFunction(file) {
    let pro = localStorage.getItem("projects");
    let list = [];
    let saved = false;

    if (pro) {
        list = JSON.parse(pro);


        for (let i = 0; i < list.length; i++) {
            let project = list[i];
            if (project.name === file.name) {
                list[i] = file;
                saved = true;
            }
        }
    }
    if (!saved) {
        list.push(file);
    }
    localStorage.setItem("projects", JSON.stringify(list));
    setTimeout(function () {
        updateVisualList();
    }, 1);
};
module.exports.save = saveFunction;

/**
 * delete a project from the browser cache
 * 
 * @param {String} name the project name
 * 
 * @returns {Promise}
 */
function deleteProject(name) {
    return new Promise(function (resolve, reject) {
        loadProject(name)
            .then(function (data) {
                if (confirm("Are you sure you want to delete '" + name + "'?")) {
                    let pro = localStorage.getItem("projects");
                    let deleted = false;
                    if (pro) {
                        let list = JSON.parse(pro);

                        for (let i = list.length - 1; i >= 0; i--) {
                            let project = list[i];
                            if (project.name === name) {
                                list.splice(i, 1);
                                deleted = true;
                            }
                        }
                        localStorage.setItem("projects", JSON.stringify(list));
                        setTimeout(function () {
                            updateVisualList();
                        }, 1);
                    }

                    if (!deleted) {
                        reject(new Error("Project Not Found or otherwise wasn't able to be deleted"));
                    } else{
                        resolve();
                    }
                } else {
                    reject(new Error("Delete cancelled."));
                }
            })
            .catch(function (err) {
                reject(err);
            })
    });
};

module.exports.delete = deleteProject;