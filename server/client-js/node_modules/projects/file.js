let project = require("projects");
const FileTree = require("filetree");
const JSEvents = require("jsevents");
const newFileStructure = require("./newfile.js");

const projectSettings = require("./settings");


class ProjectFile{
    constructor(name){
        this.name = name;
        this.setup();
        const that = this;

        // load the project
        project.load(name).then(function(data){
            console.log("loading Data");
            that.setFile(data);

        }).catch(function(err){
            console.warn(err);
            // then this is a new project
            console.log("New Project");
            that.file.name = name;
            that.save();
        });
    }

    onLoad(){
        let projectEl = document.getElementById("project-list-current");
        projectEl.innerText = this.file.name;

        this.events.triggerCallback("load", this, []);
    }

    setFile(file){
        this.file = file;

        this.fileTrees = {};

        let element = document.getElementById("files-list-menu");
        element.innerHTML = "";

        for(let d in this.file.data){
            let options = {
                name: d
            };

            let tree = new FileTree(
                element, 
                this.file.data[d].files, 
                options
            );
            this.treeSetup(tree, d);
            this.fileTrees[d] = tree;
        }

        this.onLoad();
    }

    setup(){
        this.file = newFileStructure();

        this.events = new JSEvents(this);
    }

    setData(data){
        for(let d in data){
            if(d === "data"){
                continue;
            }
            this.file[d] = data[d];
        }

        return this;
    }

    /**
     * set the event handlers for the file trees
     * 
     * @param {FileTree} tree the file tree class
     */
    treeSetup(tree, name){
        tree.on("file-opened", function(file){
            console.log("Opening File", file);
            // open the blocky file editor class
        });
    }

    /**
     * save the data
     */
    save(){
        console.log("Save File", this.file);
        project.save(this.file);
    }

    get data(){
        return this.file;
    }

    /**
     * 
     */
    updateDOM(){

    }

    settings(){
        const that = this;

        let settings = new projectSettings(this);

        settings.on("save", function(){

        });

        settings.on("delete", function(){
            console.log("Delete Project");
            project.delete(that.name)
                .then(function(){
                    // deleted load the demo and scrap the settings menu
                    settings.close();
                    project.loadDemo();
                })
                .catch(function(err){
                    // not deleted for some reason
                    // TODO: send to message to a toast
                    console.log("Delete Request Canceled", err.message);
                });
        });
    }
}

module.exports = ProjectFile;